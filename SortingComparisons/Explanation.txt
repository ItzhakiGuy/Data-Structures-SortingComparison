insertionVsQuickSort on random array:

- בגרף ניתן לראות שהקו הכחול המייצג את insertion sort נמצא מעל הקו הירוק שמייצג את n*log(n).
  במקרה הממוצע והגרוע insertion sort יעשה n^2 השוואות ולכן הוא נמצא ברובו הרבה מעל הקו הירוק.
  
- לעומת זאת הקו האדום המייצג את quick sort עושה במקרה הממוצע וגם במקרה הטוב זמן ריצה של n*log(n).
  לכן ניתן לראות שהוא קצת מתחת לקו הירוק ובמקביל אליו כלומר n*log(n) עד כדי קבוע.

  MergeVsQuick:

- בגרף ניתן לראות שהקו הכחול המייצג את merge sort נמצא קצת מעל הקו הירוק n*log(n) ובמקביל עליו.
  כיוון ש- merge sort רץ בזמן ריצה של n*log(n) במקרה הגרוע, הממוצע והמקרה הטוב ניתן לראות שהוא קרוב לקו הירוק עד כדי קבוע.
  
 - הקו האדום המייצג את quick sort נמצא גם במקביל לקו הירוק כי אנו יודעים שגם אלגוריתם זה רץ ב - n*log(n) במקרה הממוצע.
 
 insertionVsQuickOnSortedArray:
 
 - בגרף ניתן לראות ש- insertion sort (הקו הכחול) צמוד ומקביל לציר ה- x כיוון שהמערך כבר ממויין. לכן ה- insertion sort עושה רק n השוואות
   שזה המקרה הטוב ביותר של אלגוריתם זה.
 
 - לעומת זאת ה- quick sort נמצא בזמן הריצה הגרוע ביותר של האלגוריתם (n^2) כיוון שאנו כל פעם בוחרים את ה- pivot להיות הימני ביותר במערך,
   אבל בגלל שהמערך כבר ממויין בשלב הבא נמיין רק n-1 איברים וכן הלאה. ולכן זמן הריצה שלו יהיה n^2.
   
   countingVsQuick:
   
  - בגרף ניתן לראות ש- counting sort אשר מניח דברים על המערך (שגודל האיבר המקסימלי הוא n) רץ בזמן ריצה של n+k כאשר k הוא האיבר המקסימלי.
    לכן במקרה זה זמן הריצה יהיה n+n=2n שזה בעצם כמו n עד כדי קבוע.

  - ה- quick sort לעומתו עושה במקרה הממוצע ובמקרה הטוב n*log(n) השוואות ולכן הוא צמוד ומקביל לקו הירוק עד כדי קבוע.
  
  arbitraryPivotVsRandomPivot:
  
  - בגרף ניתן לראות ששני האלגוריתמים רצים ב n*log(n) עד כדי קבוע. ההבדל הוא שכאשר ה pivot נבחר בצורה רנדומלית הקבוע יותר גדול 
    ולכן הגרף שלו מעל לגרף של ה- random. בנוסף ה- random קורא בכל ריצה לספרייה חיצונית math.random אשר ניתן להניח שמשפיעה על זמן הריצה. 